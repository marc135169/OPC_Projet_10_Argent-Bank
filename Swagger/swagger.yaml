swagger: '2.0'
info:
  title: Bank Argent API Documentation
  description: >
    This API contains all available endpoints for the Bank Argent system, covering user authentication, profiles,
    accounts, and transactions. Each endpoint is documented with its expected input, output, and error handling.
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: API endpoint for user authentication and token generation.
      parameters:
        - in: body
          name: body
          description: Login payload containing user credentials.
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login successful. Returns a JWT token.
          examples:
            application/json:
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid credentials or missing fields.
        '500':
          description: Internal server error.
  /user/signup:
    post:
      tags:
        - Authentication
      summary: User Signup
      description: API endpoint for user registration.
      parameters:
        - in: body
          name: body
          description: Signup payload containing user details.
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup successful.
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid input fields.
        '500':
          description: Internal server error.
  /user/profile:
    get:
      security:
        - Bearer: []
      tags:
        - Profile
      summary: Fetch User Profile
      description: Retrieve the profile of the authenticated user.
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer JWT token for authentication.
          required: true
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successfully.
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid request parameters.
        '500':
          description: Internal server error.
    put:
      security:
        - Bearer: []
      tags:
        - Profile
      summary: Update User Profile
      description: API to update the profile attributes of an authenticated user.
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer JWT token for authentication.
          required: true
        - in: body
          name: body
          description: Payload with updated profile details.
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: Profile updated successfully.
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid input data.
        '500':
          description: Internal server error.
  /user/accounts:
    get:
      security:
        - Bearer: []
      tags:
        - Accounts
      summary: Get User Accounts
      description: Retrieve all accounts associated with the authenticated user.
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer JWT token for authentication.
          required: true
      produces:
        - application/json
      responses:
        '200':
          description: Accounts retrieved successfully.
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 200
              message:
                type: string
                example: "Accounts retrieved successfully."
              accounts:
                type: array
                items:
                  $ref: '#/definitions/UserAccount'
        '404':
          description: No accounts found.
        '500':
          description: Internal server error.
  /user/accounts/{accountID}/transactions:
    get:
      security:
        - Bearer: []
      tags:
        - Transactions
      summary: Get Account Transactions
      description: Retrieve transaction details for a specific account, filtered by the current month and grouped by account.
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer JWT token for authentication.
          required: true
        - in: path
          name: accountID
          type: string
          description: ID of the account.
          required: true
      
      produces:
        - application/json
      responses:
        '200':
          description: Transactions retrieved successfully.
          schema:
            type: object
            properties:
              accountID:
                type: string
                example: "acc123"
              transactions:
                type: array
                items:
                  $ref: '#/definitions/Transactions'
        '400':
          description: Bad request.
        '401':
          description: Unauthorized or invalid token.
        '404':
          description: Account not found.
        '500':
          description: Internal server error.
  /user/accounts/{accountID}/transactions/{transactionID}:
    get:
      security:
        - Bearer: []
      tags:
        - Transactions
      summary: Get Transaction Details
      description: Retrieve the details of a specific transaction.
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer JWT token for authentication.
          required: true
        - in: path
          name: accountID
          type: string
          description: ID of the account.
          required: true
        - in: path
          name: transactionID
          type: string
          description: ID of the transaction.
          required: true
      produces:
        - application/json
      responses:
        '200':
          description: Transaction details retrieved successfully.
          schema:
            $ref: '#/definitions/Transactions'
        '404':
          description: Transaction not found.
        '500':
          description: Internal server error.
    patch:
      security:
        - Bearer: []
      tags:
        - Transactions
      summary: Update Transaction Comments
      description: Add, Del or edit the category or note for a specific transaction. Only `category` and `note` can be modified.
      parameters:
        - in: header
          name: Authorization
          type: string
          description: Bearer JWT token for authentication.
          required: true
        - in: path
          name: accountID
          type: string
          description: ID of the account.
          required: true
        - in: path
          name: transactionID
          type: string
          description: ID of the transaction.
          required: true
        - in: body
          name: body
          description: Updated values for category or note only.
          required: true
          schema:
            $ref: '#/definitions/TransactionComments'
      produces:
        - application/json
      responses:
        '200':
          description: Comments updated successfully.
          examples:
            application/json:
              category: "Informatique"
              note: "Bought a new laptop"
          schema:
            $ref: '#/definitions/TransactionResponseComments'
        '400':
          description: Invalid input (fields other than category or note are provided).
        '401':
          description: Unauthorized or invalid token.
        '403':
          description: Action not permitted.
        '404':
          description: Transaction or comments not found.
        '500':
          description: Internal server error.
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: >
      Use the Bearer token to authorize requests. Example:
      `Authorization: Bearer <your-token-here>`.
definitions:
  User:
    type: object
    properties:
      email:
        type: string
        description: User's email address.
        example: "user@example.com"
      password:
        type: string
        description: User's password.
        example: "securePassword123"
      firstName:
        type: string
        description: User's first name.
        example: "John"
      lastName:
        type: string
        description: User's last name.
        example: "Doe"
      userName:
        type: string
        description: User's public username.
        example: "johndoe"
  Login:
    type: object
    properties:
      email:
        type: string
        description: User's email address.
        example: "user@example.com"
      password:
        type: string
        description: User's password.
        example: "securePassword123"
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
        description: HTTP status code.
      message:
        type: string
        description: Response message.
      body:
        type: object
        description: Response payload.
        properties:
          id:
            type: string
            description: Unique identifier.
            example: "user123"
          email:
            type: string
            description: User's email.
            example: "user@example.com"
  LoginResponse:
    type: object
    properties:
      token:
        type: string
        description: JWT token for authentication.
  UserProfile:
    type: object
    properties:
      userName:
        type: string
        description: User's updated username.
        example: "newUserName"
  Transactions:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier for the transaction.
        example: "txn12345"
      date:
        type: string
        format: date-time
        description: Transaction date and time.
        example: "2024-12-06T12:34:56Z"
      description:
        type: string
        description: Description of the transaction.
        example: "Grocery Store Purchase"
      amount:
        type: number
        format: float
        description: Amount of the transaction.
        example: 50.00
      balance:
        type: number
        format: float
        description: Account balance after the transaction.
        example: 500.00
      type:
        type: string
        description: Type of transaction.
        example: "Debit"
      category:
        type: string
        description: Transaction category.
        example: "Groceries"
      note:
        type: string
        description: Additional user note.
        example: "Weekly shopping."
  UserAccount:
    type: object
    properties:
      accountId:
        type: string
        description: Unique identifier for the account.
        example: "acc123"
      accountName:
        type: string
        description: Name of the account.
        example: "Savings Account"
  TransactionComments:
    type: object
    properties:
      category:
        type: string
        description: Updated category for the transaction.
        example: "Informatique"
      note:
        type: string
        description: Updated note for the transaction.
        example: "Bought a new laptop."
  TransactionResponseComments:
    type: object
    properties:
      category:
        type: string
        description: Updated category.
        example: "Informatique"
      note:
        type: string
        description: Updated note.
        example: "Bought a new laptop."
      commentsID:
        type: string
        description: Identifier of the comments.
        example: "note123"
