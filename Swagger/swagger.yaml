swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Login Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'            
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          examples:
            application/json:
              token: "myToken"
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Login Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'          
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    get:
      security:
        - Bearer: [ ]
      tags:
        - User Profile Module
      summary: User Profile API
      description: API for fetching a user profile
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: [ ]
      tags:
        - User Profile Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user Username attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile/account/transactions:
    get:
      security:
        - Bearer: [ ]
      tags:
        - User Transaction Module
      summary: Get all user's transactions
      description: API for fetch all user's transactions
      produces:
        - application/json
      responses:
        '200':
          description: User's transactions retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Transactions'
        '400':
          description: No transactions found
          schema:
            type: object
            properties:
              error:
                type: string
                example: "No transactions found."
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal server error occurred."  
    patch:
      security:
        - Bearer: [ ]
      tags:
        - User Transaction Module
      summary: Update category or note of a specific transaction
      description: API to update either the category or the note of a transaction for a specific account.
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Provide the keys for the account and transaction along with the fields to update.
          required: true
          schema:
            type: object
            properties:
              accountKey:
                type: string
                description: The unique identifier of the account containing the transaction.
                example: "account123"
              transactionKey:
                type: string
                description: The unique identifier of the transaction to update.
                example: "transaction456"
              category:
                type: string
                description: Updated category of the transaction (optional).
                example: "Shopping"
              note:
                type: string
                description: Updated note for the transaction (optional).
                example: "Updated note for the transaction"
      responses:
        '200':
          description: Transaction updated successfully
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Transaction updated successfully"
              transaction:
                $ref: '#/definitions/Transactions'
        '400':
          description: Invalid request payload
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Invalid fields provided"
        '404':
          description: Account or transaction not found
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Account or transaction not found"
        '500':
          description: Internal Server Error
          schema:
            type: object
            properties:
              error:
                type: string
                example: "An internal server error occurred"
  /user/accounts:
    get:
      security:
        - Bearer: [ ]
      tags:
        - User Account Module
      summary: Get user accounts
      description: Retrieve all accounts associated with the authenticated user.
      produces:
        - application/json
      responses:
        '200':
          description: Accounts retrieved successfully
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 200
              message:
                type: string
                example: "Accounts retrieved successfully"
              accounts:
                type: array
                items:
                  $ref: '#/definitions/UserAccount'              
        '404':
          description: No accounts found
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 404
              message:
                type: string
                example: "No accounts found for the user."          
        '500':
          description: Internal server error
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 500
              message:
                type: string
                example: "An internal server error occurred."                     
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: >
      Use the Bearer token to authorize requests. Example:
      `Authorization: Bearer <your-token-here>`.
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
      userName:
        type: string
        description: user public name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      userName:
        type: string
  Transactions:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier of the transaction
        example: "uniqueID@123"
      date:
        type: string
        format: date-time
        description: Date of the transaction
        example: "2024-12-06T12:34:56Z"
      description:
        type: string
        description: Description of the transaction
        example: "Golden Sun Bakery"
      amount:
        type: number
        format: float
        description: Transaction amount
        example: 8.00
      balance:
        type: number
        format: float
        description: Account balance after the transaction
        example: 298.00
      type:
        type: string
        description: Type of transaction
        example: "Electronic"
      category:
        type: string
        description: Category of the transaction
        example: "Food"
      note:
        type: string
        description: User-provided note for the transaction
        example: "Lunch with friends"  
  UserAccount:
    type: object
    properties:
      accountId:
        type: string
        description: Unique identifier of the account
        example: "account123"
      accountName:
        type: string
        description: Name of the account
        example: "Checking Account"